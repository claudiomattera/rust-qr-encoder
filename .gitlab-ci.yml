stages:
  - configure
  - lint
  - build
  - test
  - documentation
  - package

default:
  before_script:
    - apt-get update
    - apt-get install -y gtk+-3.0-dev librust-pango-dev


# Ignore warnings about format from rustfmt
.lint:rustfmt:
  stage: lint
  image: rust:latest
  before_script:
    - rustup component add rustfmt
  script:
    - cargo fmt --all -- --check
  allow_failure: true


lint:clippy:
  stage: lint
  image: rust:latest
  before_script:
    - rustup component add clippy
    - apt-get update
    - apt-get install -y gtk+-3.0-dev librust-pango-dev
  script:
    - cargo clippy --all-targets --all-features
  allow_failure: true


build:cargo:
  stage: build
  image: rust:latest
  script:
    - cargo build --all-targets --all-features
  artifacts:
    paths:
      - 'target/debug/'
    expire_in: 1 day


test:cargo:
  stage: test
  image: rust:latest
  script:
    - cargo test
  dependencies:
    - build:cargo


package:cargo:linux:
  stage: package
  image: rust:latest
  only:
    - tags
  before_script:
    - rustup target add x86_64-unknown-linux-gnu
    - apt-get update
    - apt-get install -y gtk+-3.0-dev librust-pango-dev
  script:
    - export PKG_CONFIG_ALLOW_CROSS=1
    - cargo build --release --target=x86_64-unknown-linux-gnu
  artifacts:
    paths:
      - 'target/x86_64-unknown-linux-gnu/release/${CI_PROJECT_NAME}'
    expire_in: 1 day


package:cargo:linux-standalone:
  stage: package
  image: rust:latest
  only:
    - tags
  before_script:
    - rustup target add x86_64-unknown-linux-musl
    - apt-get update
    - apt-get install -y gtk+-3.0-dev librust-pango-dev
  script:
    - export PKG_CONFIG_ALLOW_CROSS=1
    - cargo build --release --target=x86_64-unknown-linux-musl
  artifacts:
    paths:
      - 'target/x86_64-unknown-linux-musl/release/${CI_PROJECT_NAME}'
    expire_in: 1 day


# Cross compilation to Windows x86 from Debian is unsupported
# https://github.com/rust-lang/rust/issues/12859
.package:cargo:windows:x86:
  stage: package
  image: rust:latest
  only:
    - tags
  before_script:
    - apt-get update
    - apt-get install -y mingw-w64
    - rustup target add i686-pc-windows-gnu
  script:
    - export PKG_CONFIG_ALLOW_CROSS=1
    - cargo build --release --target=i686-pc-windows-gnu
  artifacts:
    paths:
      - 'target/i686-pc-windows-gnu/release/${CI_PROJECT_NAME}.exe'
    expire_in: 1 day


# Compilation on Windows is unsupported due to dependency on GTK
.package:cargo:windows:x86_64:
  stage: package
  image: rust:latest
  only:
    - tags
  before_script:
    - apt-get update
    - apt-get install -y mingw-w64
    - rustup target add x86_64-pc-windows-gnu
  script:
    - export PKG_CONFIG_ALLOW_CROSS=1
    - cargo build --release --target=x86_64-pc-windows-gnu
  artifacts:
    paths:
      - 'target/x86_64-pc-windows-gnu/release/${CI_PROJECT_NAME}.exe'
    expire_in: 1 day


package:ebuild:
  stage: package
  image: rust:latest
  only:
    - tags
  before_script:
    - apt-get update
    - apt-get install -y jq
  script:
    - FILTER='.packages | map(select(.name != "${CI_PROJECT_NAME}")) | sort_by(.name + .version) | .[] | (.name + "-" + .version)'
    - CRATES=`cargo metadata --all-features --format-version=1 | jq -r "${FILTER}"`
    - echo $CRATES | sed -e '/^{{ crates }}/{r /dev/stdin' -e 'd;}' packaging/gentoo/rust-qr-encoder.ebuild > packaging/gentoo/rust-qr-encoder-${CI_COMMIT_TAG:1}.ebuild
  artifacts:
    paths:
      - 'packaging/gentoo/rust-qr-encoder-${CI_COMMIT_TAG:1}.ebuild'
    expire_in: 1 day
